#
# Sample configuration file for ISC dhcpd for Debian
#
# Attention: If /etc/ltsp/dhcpd.conf exists, that will be used as
# configuration file instead of this file.
#
#

# The ddns-updates-style parameter controls whether or not the server will
# attempt to do a DNS update when a lease is confirmed. We default to the
# behavior of the version 2 packages ('none', since DHCP v2 didn't
# have support for DDNS.)
ddns-update-style none;

# option definitions common to all supported networks...
option domain-name "google.com";
option domain-name-servers 8.8.8.8;

default-lease-time 6000;
max-lease-time 72000;

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
authoritative;

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
# log-facility local7;

# No service will be given on this subnet, but declaring it helps the 
# DHCP server to understand the network topology.

# Declare options: 
option opt128 code 128 = text;
option vendorid code 60= text;
option opt224 code 224 =text;
option opt225 code 225 =text;
option opt226 code 226 =text;
option opt132 code 132 =text;
option opt26 code 26 =text;
option opt43 code 43 =text;
option opt67 code 67 =text;


option rfc3442-classless-static-routes code 121 = array of integer 8;

# Declare the option space for ACS parameters:

# option space acs;
# option acs.url code 1 = text;
# option opt43 code 43 = encapsulate acs;

option space genexis;
option genexis.fw code 2 = text;
option genexis.config code 3 = text;
option genexis.operator-config code 4 = text;

# Declare vendor option space

option space vivso code width 4;

option vivso.iana code 0 = string;
option vivso.iana 01:01:01;

# Encapsulate all into DHCP option 125

option vivso.genexis code 25167 = encapsulate genexis;
option option125 code 125 = encapsulate vivso;

# class
class "devicenumber6" {
  match if substring (option vendor-class-identifier, 0, 7) = "device6";
}

class "devicenumber8" {
  match if substring (option vendor-class-identifier, 0, 7) = "device8";
}

class "pure"{
  match if substring (option vendor-class-identifier, 0, 4) = "PURE";
}

class "vlan150"{
  match if substring (option vendor-class-identifier, 0, 7) = "vlan150";
}

class "rma8"{
  match if substring (option vendor-class-identifier, 0, 12) = "geneos-polar";
}

# This is a very basic subnet declaration.
host dluong {
  hardware ethernet 60:a4:b7:dd:ee:bb;
  fixed-address 10.5.1.2;
}

subnet 10.5.1.0 netmask 255.255.255.0 {
  range 10.5.1.3 10.5.1.254;
  
  option routers 10.5.1.1;

  # option opt128 "http:/10.5.1.1:8000/config/34e3.80df.be74_V1";

  # option opt128 "http://192.169.0.1:8000/config/provisioning-F500-GNX-34E380CAE000-test.tar.gz";

  # option opt225 "demoportal.genexis.eu";

  # option opt128 "http://192.169.0.1:8000/genexis-PURE-ED500-rid77-pppoe-vlan7.tar.gz";
  # option rfc3442-classless-static-routes 24, 192, 168, 123, 10, 10, 10, 1, 0, 192, 168, 1, 2;

  # option opt224 "http://192.169.0.1:8000/firmware/GenXOS-Panther-GNXL3-10.5.0-R-210716_1307.y3";

  # option opt224 "http://10.5.1.1:8000/firmware/PURE-F500-GNX-4.3.6.120-R.y3";

  # option genexis.config "http://192.169.0.1:8000/config/single-wan.uci.conf";

#   option genexis.operator-config "http://10.5.1.1:8000/config/wan_access.tar.gz";

}


subnet 192.168.3.0 netmask 255.255.255.0 {
  range 192.168.3.3 192.168.3.254;
  option routers 192.168.3.1;
  # if substring (option vendor-class-identifier, 0, 51) = "FT-P3410B,GenXOS-Panther-GNXL3-10.5.0-R-210716_1307" {
  #   option opt224 "http://192.168.3.1:8000/firmware/GenXOS-Panther-GNXL3-11.3.0-R.y3";
  # }
  
  # option opt128 "http://192.168.3.1:8000/uci_provision.uci.conf";
  # option opt128 "http://192.168.3.1:8000/backup-ED500-GNX-34E3807600A0.tar.gz";
  # option opt43 "http://acs.avsystem.com:10301/acs/genexis/";
  # option opt224 "http://192.168.3.1:8000/firmware/FiberTwist-P6426-GenXOS-Panda-GNX-11.3.0-R_update.pkgtb";
  # option genexis.fw "http://192.168.3.1:8000/firmware/GenXOS-Panda-GNX-11.3.1-RC1_loader_update.pkgtb";
}

# subnet 88.88.88.0 netmask 255.255.255.0 { 
#   range 88.88.88.2 88.88.88.254;
#   option routers 88.88.88.1;
# }

# subnet 192.168.4.0 netmask 255.255.255.0 {
#   # pool {
#   #   allow members of "rma8";
#   #   range 192.168.4.80 192.168.4.86;
#   #   option genexis.fw "tftp://192.168.4.90/geneos-polar-3.13.1-R.img";
#   # }
#   range 192.168.4.2 192.168.4.254;
#   option routers 192.168.4.1;
# # vendor-option-space acs;
# #  option opt43 "http://acs.avsystem.com:10301/acs/genexis/"; 
# #  if substring (option vendor-class-identifier, 0, 4) = "PURE" {
# #   option opt224 "http://192.168.4.254:8000/PURE-ED500-GNX-4.3.6.110-R.y3";   
# #     option opt224 "http://192.168.4.254:8000/PURE-ED500-GNX-4.3.6.112-R.y3";
# #  }
# #  if substring (option vendor-class-identifier, 0, 10) = "FiberTwist" { 
# #  option opt224 "http://192.168.4.254:8000/GenXOS-Panther-GNXL3-10.5.0-R-210716_1307.y3";
# #  }
# #  option genexis.fw "tftp://192.168.4.15/geneos-polar-3.13.1-R.img";
# #  option genexis.config "tftp://192.168.4.15/opcfg_mc_mgnt-p2420-v1.cfg";
# #    option genexis.operator-config "http://192.168.4.254:8000/2phases.tar.gz";
# #   option opt128 "http://192.168.4.254:8000/RMA76/provisioning-RMA76.tar.gz";
# }

subnet 192.168.6.0 netmask 255.255.255.0 {
  range 192.168.6.2 192.168.6.254;
  option routers 192.168.6.1;
}

subnet 192.168.7.0 netmask 255.255.255.0 {
  range 192.168.7.2 192.168.7.254;
  option routers 192.168.7.1;
}

subnet 192.168.8.0 netmask 255.255.255.0 {
  range 192.168.8.2 192.168.8.254;
  option routers 192.168.8.1;
}

subnet 192.168.9.0 netmask 255.255.255.0 {
  range 192.168.9.2 192.168.9.254;
  option routers 192.168.9.1;
}

subnet 192.168.10.0 netmask 255.255.255.0 {
  range 192.168.10.2 192.168.10.254;
  option routers 192.168.10.1;
#  option opt43 "http://acs.avsystem.com:10301/acs/genexis/";
}

subnet 192.168.11.0 netmask 255.255.255.0 {
  range 192.168.11.2 192.168.11.254;
  option routers 192.168.11.1;
#  option opt43 "http://acs.avsystem.com:10301/acs/genexis/";
}

subnet 192.168.5.0 netmask 255.255.255.0 {
  range 192.168.5.2 192.168.5.254;
  option routers 192.168.5.1;
  # pool {
  #   allow members of "devicenumber6";
  #   range 192.168.5.1 192.168.5.50;
  # }
  # pool {
  #   allow members of "devicenumber8";
  #   range 192.168.5.51 192.168.5.80;
  # }
  # pool {
  #   allow members of "vlan150";
  #   range 192.168.5.81 192.168.5.90;
  # }
}

# This declaration allows BOOTP clients to get dynamic addresses,
# which we don't really recommend.

#subnet 10.254.239.32 netmask 255.255.255.224 {
#  range dynamic-bootp 10.254.239.40 10.254.239.60;
#  option broadcast-address 10.254.239.31;
#  option routers rtr-239-32-1.example.org;
#}

# A slightly different configuration for an internal subnet.
#subnet 10.5.5.0 netmask 255.255.255.224 {
#  range 10.5.5.26 10.5.5.30;
#  option domain-name-servers ns1.internal.example.org;
#  option domain-name "internal.example.org";
#  option subnet-mask 255.255.255.224;
#  option routers 10.5.5.1;
#  option broadcast-address 10.5.5.31;
#  default-lease-time 600;
#  max-lease-time 7200;
#}

# Hosts which require special configuration options can be listed in
# host statements.   If no address is specified, the address will be
# allocated dynamically (if possible), but the host-specific information
# will still come from the host declaration.



# Fixed IP addresses can also be specified for hosts.   These addresses
# should not also be listed as being available for dynamic assignment.
# Hosts for which fixed IP addresses have been specified can boot using
# BOOTP or DHCP.   Hosts for which no fixed address is specified can only
# be booted with DHCP, unless there is an address range on the subnet
# to which a BOOTP client is connected which has the dynamic-bootp flag
# set.
#host fantasia {
#  hardware ethernet 08:00:07:26:c0:a5;
#  fixed-address fantasia.fugue.com;
#}

# You can declare a class of clients and then do address allocation
# based on that.   The example below shows a case where all clients
# in a certain class get addresses on the 10.17.224/24 subnet, and all
# other clients get addresses on the 10.0.29/24 subnet.

#class "devicenumber6" {
#  match if substring (option vendor-class-identifier, 0, 7) = "device6";
#}

#shared-network 224-29 {
#  subnet 10.17.224.0 netmask 255.255.255.0 {
#    option routers rtr-224.example.org;
#  }
#  subnet 10.0.29.0 netmask 255.255.255.0 {
#    option routers rtr-29.example.org;
#  }
#  pool {
#    allow members of "foo";
#    range 10.17.224.10 10.17.224.250;
#  }
#  pool {
#    deny members of "foo";
#    range 10.0.29.10 10.0.29.230;
#  }
#}
#
#subnet 10.1.1.0 netmask 255.255.255.0 {
#	range 10.1.1.3 10.1.1.254
#}
#

subnet 192.168.102.0 netmask 255.255.255.0 {
    range 192.168.102.2 192.168.102.254;
    option routers 192.168.102.1;
}


subnet 192.168.150.0 netmask 255.255.255.0 {
    range 192.168.150.2 192.168.150.254;
    option routers 192.168.150.1;
}


subnet 192.168.250.0 netmask 255.255.255.0 {
    range 192.168.250.2 192.168.250.254;
    option routers 192.168.250.1;
}

subnet 192.168.101.0 netmask 255.255.255.0 {
    range 192.168.101.2 192.168.101.254;
    option routers 192.168.101.1;
}

subnet 192.168.4.0 netmask 255.255.255.0 {
    range 192.168.4.2 192.168.4.254;
    option routers 192.168.4.1;
}

subnet 192.168.107.0 netmask 255.255.255.0 {
	range 192.168.107.2 192.168.107.254;
	option routers 192.168.107.1;
}

subnet 192.168.54.0 netmask 255.255.255.0 {
	range 192.168.54.2 192.168.54.254;
	option routers 192.168.54.1;
}

subnet 192.168.50.0 netmask 255.255.255.0 {
	range 192.168.50.2 192.168.50.254;
	option routers 192.168.50.1;
}

subnet 192.168.60.0 netmask 255.255.255.0 {
	range 192.168.60.2 192.168.60.254;
	option routers 192.168.60.1;
}

subnet 192.168.70.0 netmask 255.255.255.0 {
	range 192.168.70.2 192.168.70.254;
	option routers 192.168.70.1;
}

subnet 192.168.80.0 netmask 255.255.255.0 {
	range 192.168.80.2 192.168.80.254;
	option routers 192.168.80.1;
}

subnet 192.168.90.0 netmask 255.255.255.0 {
	range 192.168.90.2 192.168.90.254;
	option routers 192.168.90.1;
}

subnet 192.168.254.0 netmask 255.255.255.0 {
	range 192.168.254.2 192.168.254.254;
	option routers 192.168.254.1;
}

subnet 192.168.40.0 netmask 255.255.255.0 {
	range 192.168.40.2 192.168.40.254;
	option routers 192.168.40.1;
}

subnet 192.168.42.0 netmask 255.255.255.0 {
	range 192.168.42.2 192.168.42.254;
	option routers 192.168.42.1;
}

subnet 192.168.51.0 netmask 255.255.255.0 {
	range 192.168.51.2 192.168.51.254;
	option routers 192.168.51.1;
}

subnet 192.168.52.0 netmask 255.255.255.0 {
	range 192.168.52.2 192.168.52.254;
	option routers 192.168.52.1;
}

subnet 192.168.55.0 netmask 255.255.255.0 {
	range 192.168.55.2 192.168.55.254;
	option routers 192.168.55.1;
}

subnet 192.168.103.0 netmask 255.255.255.0 {
	range 192.168.103.2 192.168.103.254;
	option routers 192.168.103.1;
}

subnet 192.168.194.0 netmask 255.255.255.0 {
	range 192.168.194.2 192.168.194.254;
	option routers 192.168.194.1;
}

subnet 192.168.100.0 netmask 255.255.255.0 {
	range 192.168.100.2 192.168.100.254;
	option routers 192.168.100.1;
}

subnet 192.168.132.0 netmask 255.255.255.0 {
	range 192.168.132.2 192.168.132.254;
	option routers 192.168.132.1;
}

subnet 192.168.234.0 netmask 255.255.255.0 {
	range 192.168.234.2 192.168.234.254;
	option routers 192.168.234.1;
}

subnet 192.168.235.0 netmask 255.255.255.0 {
	range 192.168.235.2 192.168.235.254;
	option routers 192.168.235.1;
}

subnet 192.168.20.0 netmask 255.255.255.0 {
	range 192.168.20.2 192.168.20.254;
	option routers 192.168.20.1;
}

subnet 192.168.236.0 netmask 255.255.255.0 {
	range 192.168.236.2 192.168.236.254;
	option routers 192.168.236.1;
}

subnet 192.168.246.0 netmask 255.255.255.0 {
	range 192.168.246.2 192.168.246.254;
	option routers 192.168.246.1;
}

subnet 192.168.247.0 netmask 255.255.255.0 {
	range 192.168.247.2 192.168.247.254;
	option routers 192.168.247.1;
}

subnet 192.168.249.0 netmask 255.255.255.0 {
	range 192.168.249.2 192.168.249.254;
	option routers 192.168.249.1;
}

subnet 192.168.13.0 netmask 255.255.255.0 {
	range 192.168.13.2 192.168.13.254;
	option routers 192.168.13.1;
  option genexis.operator-config "http://192.169.0.1:8000/config/config-TEST-DAT-PX2310B-220211_1437.tgz";
}

subnet 192.168.93.0 netmask 255.255.255.0 {
	range 192.168.93.2 192.168.93.254;
	option routers 192.168.93.1;
  # option opt224 "http://192.168.93.1:8000/firmware/EG200-X-ADAMO-4.3.6.131-R-220210_1750.y3";
}

subnet 192.168.120.0 netmask 255.255.255.0 {
	range 192.168.120.2 192.168.120.254;
	option routers 192.168.120.1;
  # option opt224 "http://192.168.120.1:8000/firmware/EG200-X-ADAMO-4.3.6.131-R-220210_1750.y3";
}

subnet 192.168.15.0 netmask 255.255.255.0 {
	range 192.168.15.2 192.168.15.254;
	option routers 192.168.15.1;
}

subnet 192.168.182.0 netmask 255.255.255.0 {
	range 192.168.182.2 192.168.182.254;
	option routers 192.168.182.1;
}

subnet 192.168.200.0 netmask 255.255.255.0 {
	range 192.168.200.2 192.168.200.254;
	option routers 192.168.200.1;
}

subnet 192.168.198.0 netmask 255.255.255.0 {
	range 192.168.198.2 192.168.198.254;
	option routers 192.168.198.1;
}

subnet 192.168.84.0 netmask 255.255.255.0 {
	range 192.168.84.2 192.168.84.254;
	option routers 192.168.84.1;
}

subnet 192.168.199.0 netmask 255.255.255.0 {
	range 192.168.199.2 192.168.199.254;
	option routers 192.168.199.1;
}

subnet 192.168.145.0 netmask 255.255.255.0 {
	range 192.168.145.2 192.168.145.254;
	option routers 192.168.145.1;
}

subnet 192.168.245.0 netmask 255.255.255.0 {
	range 192.168.245.2 192.168.245.254;
	option routers 192.168.245.1;
}
subnet 192.168.237.0 netmask 255.255.255.0 {
	range 192.168.237.2 192.168.237.254;
	option routers 192.168.237.1;
}

subnet 192.168.170.0 netmask 255.255.255.0 {
	range 192.168.170.2 192.168.170.254;
	option routers 192.168.170.1;
}

subnet 192.168.45.0 netmask 255.255.255.0 {
	range 192.168.45.2 192.168.45.254;
	option routers 192.168.45.1;
}
